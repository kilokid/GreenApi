{"version":3,"file":"static/js/411.22dda810.chunk.js","mappings":"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","sources":["components/Chat/Chat.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getMessage, deleteMessageNotification } from \"../../api/api\";\nimport { checkCreateChat } from \"../../redux/createChatReducer\";\nimport { addMessage } from \"../../redux/messageReducer\";\n\nimport { MessageType } from \"../../redux/messageReducer\";\n\nimport './Chat.scss';\n\nconst Chat = () => {\n    const {id, apiToken} = useSelector((state: any) => state.login);\n    const chatId = useSelector((state: any) => state.chat.chatId);\n    const { register, handleSubmit } = useForm({mode: 'onBlur'});\n    const messages = useSelector((state: any) => state.message);\n    \n    const dispatch = useDispatch();\n\n    const onSubmit = async (data: any) => {\n        if (id && apiToken && chatId) {\n            const message = data.message;\n            \n            try {\n                const response = await dispatch(checkCreateChat({id, apiToken, chatId, message}) as any);\n\n                const newMessage: MessageType = {\n                    receiptId: response.payload.id,\n                    text: response.payload.message,\n                    type: 'outgoing',\n                }\n                \n                dispatch(addMessage(newMessage));\n                \n            } catch(error) {\n                console.log('error request' + error);\n            }\n        }\n    }\n\n    const handleNotification = async (notification: any) => {\n        if (!notification?.hasOwnProperty('body') || notification === null) {\n            return;\n        }\n\n        let type = notification.body.typeWebhook;\n\n        if (type === 'outgoingAPIMessageReceived') {\n            type = 'outgoing';\n        } else if (type === 'incomingMessageReceived') {\n            type = 'incoming';\n        }\n        \n        const response = await deleteMessageNotification(id, apiToken, notification.receiptId) as any;\n        \n        if (response.status === 200) {\n            const text = notification.body.messageData.textMessageData.textMessage;\n            \n            const newMessage: MessageType = {\n                receiptId: notification.receiptId,\n                text: text,\n                type: 'incoming',\n            }\n\n            dispatch(addMessage(newMessage));\n        }\n    };\n\n    useEffect(() => {\n        const checkIncomingMessages = async () => {\n            try {\n                const notification = await getMessage(id, apiToken);\n                \n                if ( notification ) {\n                    await handleNotification(notification.data);\n                }\n            } catch (error) {\n                console.error('Ошибка: ', error);\n            }\n        }\n\n        const intervalId = setInterval(checkIncomingMessages, 5000);\n\n        return () => {\n            clearInterval(intervalId);\n        };\n    }, []);\n\n    return (\n        <section className='chat'>\n            <ul className='chat__messages'>\n                {messages.map(({receiptId, text, type}: MessageType) => {\n                    const elemClass = type === 'outgoing' ? 'chat__message chat__message--me' : 'chat__message';\n                    return <li key={receiptId} className={elemClass}>{text}</li>\n                })}\n            </ul>\n            <form className=\"chat__form\" onSubmit={handleSubmit(onSubmit)}>\n                <ul className=\"chat__form-wrapper\">\n                    <li className=\"chat__form-field\">\n                        <input className='chat__form-input' {...register(\"message\", {required: 'Please enter message'})} placeholder=\"Введите сообщение\" type=\"text\" />\n                    </li>\n                </ul>\n            </form>\n        </section>\n    )\n}\n\nexport default Chat;"],"names":["_useSelector","useSelector","state","login","id","apiToken","chatId","chat","_useForm","useForm","mode","register","handleSubmit","messages","message","dispatch","useDispatch","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","response","newMessage","wrap","_context","prev","next","checkCreateChat","sent","receiptId","payload","text","type","addMessage","t0","console","log","stop","_x","apply","arguments","handleNotification","_ref2","_callee2","notification","_context2","hasOwnProperty","abrupt","body","typeWebhook","deleteMessageNotification","status","messageData","textMessageData","textMessage","_x2","useEffect","checkIncomingMessages","_ref3","_callee3","_context3","getMessage","error","intervalId","setInterval","clearInterval","_jsxs","className","children","_jsx","map","_ref4","elemClass","_objectSpread","required","placeholder"],"sourceRoot":""}